@inject DatabaseProvider DatabaseProvider
@implements IDisposable

@if (needExport)
{
    if (canExportToGitHub)
    {
        <Loading IsLoading="isExporting" LoadingText="Exporting...">
            <button type="button" @onclick="ExportToGitHub">Export to GitHub</button>
        </Loading>
    }
    else
    {
        <a class="database-not-exported" href="/database"><span>Export database</span></a>
    }
}

@code {
    private bool needExport;
    private bool canExportToGitHub;
    private bool isExporting;

    protected override async Task OnInitializedAsync()
    {
        DatabaseProvider.DatabaseSaved += DatabaseChanged;
        await GetState();
    }

    public void Dispose()
    {
        DatabaseProvider.DatabaseSaved -= DatabaseChanged;
    }

    private void DatabaseChanged(object sender, EventArgs e)
    {
        InvokeAsync(() => GetState());
    }

    private async Task GetState()
    {
        var hasUnexportedChanges = await DatabaseProvider.HasUnexportedChanges();
        canExportToGitHub = await DatabaseProvider.IsGitHubConfigured();
        needExport = hasUnexportedChanges;
        StateHasChanged();
    }

    private async Task ExportToGitHub()
    {
        isExporting = true;
        StateHasChanged();
        try
        {
            await DatabaseProvider.ExportToGitHub();
        }
        finally
        {
            isExporting = false;
        }
    }
}