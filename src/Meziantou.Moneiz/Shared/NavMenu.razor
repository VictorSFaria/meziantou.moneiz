@inject IDatabaseProvider DatabaseProvider
@implements IDisposable

<aside class="site-sidebar">
    <div class="widget-accounts">
        <Repeater Items="database?.Accounts.Where(a => a.ShowOnSidebar).OrderBy(a => a.SortOrder)">
            <RepeaterContainerTemplate>
                <ul>
                    @context
                </ul>
            </RepeaterContainerTemplate>

            <ItemTemplate Context="account">
                <li>
                    <a href="accounts/@account.Id/transactions">@account</a>
                    <Amount Value="@database.GetBalance(account)" Currency="@account.CurrencyIsoCode" />
                </li>
            </ItemTemplate>
        </Repeater>
    </div>

    <nav>
        <ul>
            <li><NavLink href="/accounts"><i class="fas fa-university"></i><span>My accounts</span></NavLink></li>
            <li><NavLink href="/categories"><i class="fas fa-tags"></i><span>My categories</span></NavLink></li>
            <li><NavLink href="/payees"><i class="fas fa-users"></i><span>My payees</span></NavLink></li>
            <li><NavLink><i class="fas fa-calendar"></i><span>My scheduler</span></NavLink></li>
            <li><NavLink><i class="fas fa-chart-line"></i><span>Analytics</span></NavLink></li>
        </ul>
    </nav>
</aside>

@code {
    private Database database;

    protected override async Task OnInitializedAsync()
    {
        DatabaseProvider.DatabaseChanged += OnDatabaseChanged;
        await LoadDatabase();
    }

    public void Dispose()
    {
        database.DatabaseChanged -= OnDatabaseChanged;
    }

    private void OnDatabaseChanged(object sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            await LoadDatabase();
            StateHasChanged();
        });

    }

    private async Task LoadDatabase()
    {
        database = await DatabaseProvider.GetDatabase();
    }
}